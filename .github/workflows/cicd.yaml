name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: composer install

    - name: Set up SSH key
      run: |
        # Create SSH key file in a temp
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > "${{ runner.temp }}/id_rsa"
        chmod 600 "${{ runner.temp }}/id_rsa"
        ls -l "${{ runner.temp }}"  # Debugging: list files to confirm id_rsa creation

    - name: Test SSH connection
      env:
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
      run: |
        echo "Testing SSH connection to EC2..."
        ssh -i "${{ runner.temp }}/id_rsa" -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} "echo 'SSH connection successful'"

    - name: Deploy application to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
        EC2_PATH: ${{ secrets.EC2_PATH }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        echo "Deploying application to EC2 instance..."

        # Copy files to the EC2 instance using custom SSH key path
        sudo rsync -avz --exclude '.env' --exclude '.git' -e "ssh -i '${{ runner.temp }}/id_rsa' -o StrictHostKeyChecking=no" ./ ${EC2_USER}@${EC2_HOST}:${EC2_PATH}

        # Run deployment tasks on the EC2 instance
        ssh -i "${{ runner.temp }}/id_rsa" -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} << EOF
          if [ ! -f ${EC2_PATH}/.env ]; then
            cp ${EC2_PATH}/.env.example ${EC2_PATH}/.env
            echo "DB_HOST=${DB_HOST}" >> ${EC2_PATH}/.env
            echo "DB_NAME=${DB_NAME}" >> ${EC2_PATH}/.env
            echo "DB_USER=${DB_USER}" >> ${EC2_PATH}/.env
            echo "DB_PASSWORD=${DB_PASSWORD}" >> ${EC2_PATH}/.env
          else
            echo ".env file already exists, skipping creation."
          fi

          # Set permissions for the deployment
          sudo chown -R www-data:www-data ${EC2_PATH}
          sudo chmod -R 755 ${EC2_PATH}
          
          # Change to the application directory
          cd ${EC2_PATH}
          
          # Install dependencies with Composer
          composer install --no-dev
          
          # Restart Apache or PHP-FPM if necessary (depending on your server setup)
          sudo systemctl restart apache2
        EOF
